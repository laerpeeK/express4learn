<mxfile host="Electron" modified="2023-11-18T20:09:29.812Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/21.6.1 Chrome/112.0.5615.204 Electron/24.6.1 Safari/537.36" etag="IyLP2_-dnRMKiv1Otp07" version="21.6.1" type="device" pages="6">
  <diagram name="createApplication" id="8pLuekl0KtoAo694ZNER">
    <mxGraphModel dx="864" dy="516" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="ol2lJSO-sMFK9XunuIDf-1" value="module.exports = createApplication" style="rounded=0;whiteSpace=wrap;html=1;fontSize=16;" vertex="1" parent="1">
          <mxGeometry x="20" y="20" width="150" height="50" as="geometry" />
        </mxCell>
        <mxCell id="ol2lJSO-sMFK9XunuIDf-3" value="createApplication:&lt;br style=&quot;font-size: 14px;&quot;&gt;1. app: http.createServer时传入，会在监听到request事件时被触发。传入req、res&lt;br&gt;&lt;br&gt;2. 增加app.methods：包括EventEmitter.prototype上的方法以及app.listen、app.init...等方法&lt;br&gt;&lt;br&gt;3. app.request为以自封装request对象为原型，且增加app.request.app = app&lt;br&gt;&lt;br&gt;4. app.response为以自封装response对象为原型，且增加app.response.app = app&lt;br&gt;(上述自封装request、response又分别以http.InComingMessage.prototype以及http.ServerResponse.prototype为原型)&lt;br&gt;&lt;br&gt;5. 调用app.init方法：初始化app对象上的基础配置cache、engines、settings。默认情况下：a.不信任代理、b.weak etag、c.queryparser允许从原型上遍历。&lt;br&gt;&lt;br&gt;6. 增加mount事件监听函数，如果保持默认的代理设置。则该应用程序采用父级应用程序的代理设置。为该应用的request、response、engines、settings设置原型为父级对应的属性。&lt;br&gt;&lt;br&gt;7.设置app.locals这个是模板使用时用来存储局部变量。略&lt;br&gt;&lt;br&gt;8.设置应用根路径mountpath。可以通过app.path()获取包括父级之后的路径。&lt;br&gt;&lt;br&gt;9. 设置json callback name为callback。即通过query调用函数的默认函数名。&lt;br&gt;&lt;br&gt;10. 设置app.router调用警告信息。" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=14;" vertex="1" parent="1">
          <mxGeometry x="20" y="80" width="620" height="420" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="WbTLByyv5R71-4gyRi5p" name="app.listen">
    <mxGraphModel dx="864" dy="516" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="rwfBB0UV9bNdh87gFQIk-1" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;app.listen:&lt;br style=&quot;&quot;&gt;1. 通过http.createServer(this)创建server对象。this为app函数。且会在监听到request时进行调用。并且传入对应的req, res。&lt;br&gt;2. server.listen.apply(server, arguments)使得调用app.listen(port, fn)实现将port, fn原封不动传给server.listen。&lt;br&gt;3. 在express源码中有大量arguments的使用&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=14;" vertex="1" parent="1">
          <mxGeometry x="20" y="20" width="620" height="150" as="geometry" />
        </mxCell>
        <mxCell id="rwfBB0UV9bNdh87gFQIk-2" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;app.handle:&lt;br style=&quot;&quot;&gt;1. 在app()时调用。app.handle一个重要的功能时添加一个默认的响应处理方式。（通过finalhandler库实现的一个保底机制）。&lt;br&gt;2. 如果没有router，即没有设置基础的中间件以及响应函数。直接返回404.&lt;br&gt;3. 否则调用router.handle(req, res, done) done即为保底响应机制。&lt;br&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=14;" vertex="1" parent="1">
          <mxGeometry x="20" y="190" width="620" height="110" as="geometry" />
        </mxCell>
        <mxCell id="rwfBB0UV9bNdh87gFQIk-3" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;app.enable、app.disable、app.enabled、app.disabled:&lt;br style=&quot;&quot;&gt;1.这四个函数均跟app.settings设置相关。&lt;br&gt;2. 前两个是设置对应的app.settings[method] 为true/false.&lt;br&gt;3. 后两个是返回对应的Boolean(app.settings[method])是否为true/false&lt;br&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=14;" vertex="1" parent="1">
          <mxGeometry x="20" y="480" width="620" height="90" as="geometry" />
        </mxCell>
        <mxCell id="rwfBB0UV9bNdh87gFQIk-4" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;app.set:&lt;br style=&quot;&quot;&gt;1. arguments.length 为 1。起一个直接返回app.settings[method]的效果。通过遍历原型链的每一层找对应层的自有属性实现。&lt;br&gt;2. argument.length !== 1：设置自身的app.settings[method]&lt;br&gt;3. 如果是etag、query parser、 trust proxy。还会进行对应的etag fn、query parser fn、trust proxy fn设置。（trust proxys设置时会把 是否采用默认代理设置标志设置为false）&lt;br&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=14;" vertex="1" parent="1">
          <mxGeometry x="20" y="330" width="620" height="130" as="geometry" />
        </mxCell>
        <mxCell id="rwfBB0UV9bNdh87gFQIk-5" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;app.lazyrouter：&lt;br style=&quot;&quot;&gt;1. 判断是否存在app._router 有则直接返回&lt;br&gt;2. 初始化app._router。默认大小写不敏感、路径末尾斜杆可选&lt;br&gt;3. app._router.stack 增加两个默认中间件：query expressInit&lt;br&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=14;" vertex="1" parent="1">
          <mxGeometry x="20" y="600" width="620" height="90" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="nGNHfA5PiMxc-XaP3dqF" name="middleware">
    <mxGraphModel dx="864" dy="516" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="peiws9BFaYdkk1tuaanx-1" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;query：&lt;br style=&quot;&quot;&gt;1. 通过parseUrl模块解析req对象，生成具体的query&lt;br&gt;2. 通过qs.parse解析query获得对象形式的query，并且赋值给req.query&lt;br&gt;3. next()：执行router.handle里闭包的函数next&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=14;" vertex="1" parent="1">
          <mxGeometry x="20" y="60" width="620" height="100" as="geometry" />
        </mxCell>
        <mxCell id="peiws9BFaYdkk1tuaanx-2" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;init：&lt;br style=&quot;&quot;&gt;1. 设置http响应头：X-Powered-By：Express&lt;br&gt;2. req.res = res; res.req = req（这个req, res为app执行时传入的）&lt;br&gt;3. req.next = next （router.handle闭包内的next函数）&lt;br&gt;4. req的原型设置为app.request, res的原型设置为app.response。（req其实是http.IncomingMessage的实例， res是http.serverResponse的实例，通过该步骤，又在中间夹了一层（具体看如何设置app.request/app.response的）&lt;br&gt;5. res.locals = res.locals || Object.create(null)&lt;br&gt;6. next()：执行router.handle里闭包的函数next&lt;br&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=14;" vertex="1" parent="1">
          <mxGeometry x="20" y="190" width="620" height="190" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="rWC8SkN-tJt2jJRkLYQI" name="router">
    <mxGraphModel dx="864" dy="516" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="YVN-NjNxzLFBmtHfo_td-1" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;new Router：&lt;br&gt;1. 设置router实例的原型为Router&lt;br&gt;2. 设置router.params，router._params具体作用参照app.params调用&lt;br&gt;3. router.caseSensitive跟router.strict都为false。在后面调用router.route。router.use时使用。这两个变量跟路径匹配的功能相关。前者不区分大小写。后者路径末尾斜杆可选&lt;br&gt;4. router.stack =&amp;nbsp; [] 不要理解为栈，因为使用时仍然是先进先用。这个变量用于存储中间件。&lt;br&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=14;" vertex="1" parent="1">
          <mxGeometry x="30" y="60" width="620" height="150" as="geometry" />
        </mxCell>
        <mxCell id="EVFpFBD7Fp-zV0vG_KKY-1" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;router.use：&lt;br&gt;1. 根据arguments判断path跟fn&lt;br&gt;2. 根据path跟fn以及router.senstive生成layer。且layer.route设置为undefined说明不是一个路由中间件&lt;br&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;a.（默认情况下，如果path不传或者传&quot;/&quot;，则会匹配所有路径。）。&lt;br&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;b. 默认情况下，大小写不敏感，后者路径末尾斜杆可选，不强制匹配完整路径&lt;br&gt;3. router.stack.push(layer)&lt;br&gt;4. 返回router方便链式调用&lt;br&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=14;" vertex="1" parent="1">
          <mxGeometry x="30" y="240" width="620" height="170" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="nxGm1yTxK8nJ1HvcNuO1" name="layer">
    <mxGraphModel dx="864" dy="516" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="AQnvf-wSC5K2UvZj1nHb-1" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;new Layer：&lt;br&gt;1. 设置layer.handle，layer.name其实就是中间件的功能函数&lt;br&gt;2. 设置layer.params, layer.path为undefined 后面实际匹配后会赋值&lt;br&gt;3. 设置layer.regexp，layer.keys其实就是通过正则去匹配。这里是通过new Layer生成具体的正则表达式&lt;br&gt;4. 设置layer.regexp.fast_star 匹配所有 * 为param&lt;br&gt;5. 设置layer.regexp.fast_slash匹配所有情况&lt;br&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=14;" vertex="1" parent="1">
          <mxGeometry x="30" y="60" width="620" height="150" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="HINRqPnZMFo5Og7Cg6HI" name="route">
    <mxGraphModel dx="864" dy="516" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
